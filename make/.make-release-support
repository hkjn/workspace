hasChanges() {
	test -n "$(git status -s .)"
}

getRelease() {
	awk -F= '/^release=/{print $2}' .release
}

getBaseTag() {
	sed -n -e "s/^tag=\(.*\)$(getRelease)\$/\1/p" .release
}

getTag() {
	if [[ -z "${1}" ]] ; then
		awk -F= '/^tag/{print $2}' .release
	else
		echo "$(getBaseTag)${1}"
	fi
}

setRelease() {
	if [[ -n "${1}" ]] ; then
		sed -i.x -e "s/^tag=.*/tag=$(getTag ${1})/" .release
		sed -i.x -e "s/^release=.*/release=${1}/g" .release
		rm -f .release.x
		runPreTagCommand "${1}"
	else
		echo "ERROR: missing release version parameter " >&2
		return 1
	fi
}

runPreTagCommand() {
	if [[ -n "${1}" ]] ; then
		COMMAND=$(sed -n -e "s/@@RELEASE@@/${1}/g" -e 's/^pre_tag_command=\(.*\)/\1/p' .release)
		if [[ -n "${COMMAND}" ]] ; then
			if ! OUTPUT=$(bash -c "${COMMAND}" 2>&1) ; then
				echo ${OUTPUT} >&2
				exit 1
			fi
		fi
	else
		echo "ERROR: missing release version parameter " >&2
		return 1
	fi
}

tagExists() {
	local tag
	tag=${1:-$(getTag)}
	test -n "${tag}" && test -n "$(git tag | grep "^$tag\$")"
}

differsFromRelease() {
	local tag
	tag=$(getTag)
	! tagExists ${tag} || test -n "$(git diff --shortstat -r $tag .)"
}

getVersion() {
	local result
	result=$(getRelease)

	if differsFromRelease; then
		result="${result}-$(git rev-parse --short HEAD)"
	fi

	if hasChanges ; then
		result="${result}-dirty"
	fi
	echo $result
}

nextPatchLevel() {
	local version
	version=${1:-$(getRelease)}
	local majorMinor
	majorMinor=$(echo ${version} | cut -d. -f1,2)
	local patch
	patch=$(echo ${version} | cut -d. -f3)
	local version
	version=$(printf "%s.%d" ${majorMinor} $((${patch} + 1)))
	echo ${version}
}

nextMinorLevel() {
	version=${1:-$(getRelease)}
	major=$(echo ${version} | cut -d. -f1);
	minor=$(echo ${version} | cut -d. -f2);
	version=$(printf "%d.%d.0" ${major} $((${minor} + 1))) ;
	echo ${version}
}

nextMajorLevel() {
	version=${1:-$(getRelease)}
	major=$(echo ${version} | cut -d. -f1);
	version=$(printf "%d.0.0" $((${major} + 1)))
	echo ${version}
}
